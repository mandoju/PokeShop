{"version":3,"sources":["utils/generateRandomPrice.ts","store/ducks/pokemonShop.ts","model/PokemonManager.ts","constants/API.ts","store/ducks/cart.ts","store/ducks/index.ts","components/Navbar/NavBar.tsx","utils/getPriceString.ts","components/PokemonList/components/PokemonListCard.tsx","constants/image.ts","constants/dictionary.ts","components/PokemonList/components/PokemonListLoadMore.tsx","components/PokemonList/PokemonList.tsx","hooks/useSelectPokemonShow.ts","components/Cart/components/CartItem.tsx","components/Modal/Modal.tsx","components/Modal/ModalMessage.tsx","components/Cart/components/CartListBuyModal.tsx","components/Cart/CartList.tsx","page/PokemonShopPage.tsx","hooks/useSelectPokemonList.ts","App.tsx","store/configureStore.ts","store/localStorage.ts","utils/throttle.ts","utils/distincPokemon.ts","serviceWorker.ts","index.tsx"],"names":["generateRandomPrice","min","max","randomNumber","Math","random","round","pokemonManager","type","this","process","axios","get","typePokemon","data","pokemon","url","pokemonInfo","POKEMON_SHOP_INITIAL_STATE","pokemonList","pokemonShow","lastSearch","loadPokemonShow","pokemons","dispatch","getState","a","pokemonShop","cachedPokemons","filter","find","p","name","newPokemons","pokemonRequests","map","Axios","Promise","all","response","newPokemonsPayload","resp","price","payload","CART_INITIAL_STATE","cart","appReducer","combineReducers","state","action","rootReducer","NavBar","useDispatch","useState","inputValue","setInputValue","handleChange","useCallback","event","search","target","value","pokemonFiltered","includes","pokemonFilteredUrls","className","onChange","placeholder","getPriceString","currency","priceString","toLocaleString","undefined","minimumFractionDigits","PokemonListCard","src","sprites","front_default","alt","style","display","onClick","addToCart","PokemonListLoadMore","useSelector","pokemonListSameSize","length","size","pokemonUrl","slice","PokemonList","idx","key","CartItem","index","href","splice","removeFromCart","Modal","props","container","modalRoot","document","getElementById","createElement","appendChild","removeChild","ReactDOM","children","React","ModalMessage","showModal","closeFunction","containerStyle","id","e","stopPropagation","role","CardListBuyModal","total","CartList","modalState","setModalState","totalPrice","reduce","b","floor","item","PokemonPage","useEffect","getPokemons","require","store","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadCartState","createStore","reducer","applyMiddleware","ReduxThunk","subscribe","func","wait","options","context","args","result","timeout","previous","later","leading","Date","now","apply","remaining","arguments","clearTimeout","trailing","setTimeout","throttle","cardInfo","array","unique","distinct","i","push","distincPokemon","stringify","setItem","saveCartState","configureStore","App","Boolean","window","location","hostname","match","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oWAQaA,EAAsB,SAACC,EAAaC,GAC/C,IAAMC,EAAeC,KAAKC,SAAWH,EAAMD,EAE3C,OAD2BG,KAAKE,MAAqB,IAAfH,ICIlCI,EAAiB,ICJvB,WAGE,aAAe,yBAFRC,UAEO,EAEVC,KAAKD,KAAOE,QALlB,0LAe8BC,IAAMC,IAAN,UCzBC,4BDyBD,iBACGH,KAAKD,OAhBtC,cAeUK,EAfV,yBAkBWA,EAAYC,KAAKC,SAlB5B,oLAyBuBC,GAzBvB,uFA0B8BL,IAAMC,IAAqBI,GA1BzD,cA0BUC,EA1BV,yBA2BWA,EAAYH,MA3BvB,0GDaaI,EAA8C,CACzDC,YAAa,GACbC,YAAa,GACbH,YAAa,GACbI,WAAY,IAsCDC,EAAkB,SAACC,GAC9B,8CAAO,WAAOC,EAAeC,GAAtB,2BAAAC,EAAA,6DACGT,EAAgBQ,IAAWE,YAA3BV,YAGFW,EAAiBX,EAAYY,QAAO,SAACd,GAAD,OACxCQ,EAASO,MAAK,SAACC,GAAD,OAAOA,EAAEC,OAASjB,EAAQiB,WAIpCC,EAAcV,EAASM,QAC3B,SAACd,GAAD,OAAcE,EAAYa,MAAK,SAACC,GAAD,OAAOA,EAAEC,OAASjB,EAAQiB,WAIrDE,EAAkBD,EAAYE,KAAI,SAACpB,GAEvC,OADuBqB,IAAMxB,IAAqBG,EAAQC,QAfvD,SAkBkBqB,QAAQC,IAAIJ,GAlB9B,cAkBCK,EAlBD,OAqBCC,EAAqBD,EAASJ,KAAI,SAACM,GAAD,mBAAC,eACpCA,EAAK3B,MAD8B,IAEtC4B,MAAO1C,EAAoB,GAAI,UAI3B2C,EA3BD,sBA2Bef,GA3Bf,YA2BkCY,IAGvChB,EAAS,CACPhB,KAvFyB,yBAwFzBmC,QAAQ,GAAD,mBAAM1B,GAAN,YAAsBuB,MAhC1B,kBAoCEhB,EAAS,CAAEhB,KA3FS,yBA2FqBmC,aApC3C,4CAAP,yDGxDIC,EAA+B,CACnCC,KAAM,ICNFC,EAAaC,YAAgB,CACjCpB,YJ2Ba,WAGQ,IAFrBqB,EAEoB,uDAFZ9B,EACR+B,EACoB,uCACpB,OAAQA,EAAOzC,MACb,IA7B2B,yBA8BzB,OAAO,2BAAKwC,GAAZ,IAAmB7B,YAAa8B,EAAON,UACzC,IA9B2B,yBA+BzB,OAAO,2BAAKK,GAAZ,IAAmB/B,YAAagC,EAAON,UACzC,IA/B2B,yBAgCzB,OAAO,2BAAKK,GAAZ,IAAmB5B,YAAa6B,EAAON,UACzC,IAhCkC,gCAiChC,OAAO,2BAAKK,GAAZ,IAAmB3B,WAAY4B,EAAON,UACxC,QACE,OAAOK,IIxCXH,KDUa,WAA8D,IAA7DG,EAA4D,uDAApDJ,EAAoBK,EAAgC,uCAC1E,OAAQA,EAAOzC,MACb,IAfc,YAgBZ,OAAO,2BAAKwC,GAAZ,IAAmBH,KAAMI,EAAON,UAClC,QACE,OAAOK,MCREE,EAJK,SAACF,EAAYC,GAC/B,OAAOH,EAAWE,EAAOC,I,mBCJdE,EAAS,WACpB,IAAM3B,EAAW4B,cADS,EAEUC,mBAAS,IAFnB,mBAEnBC,EAFmB,KAEPC,EAFO,KAGpBC,EAAeC,uBACnB,SAACC,GLmGwB,IAACC,EKlGxBJ,EAAcG,EAAME,OAAOC,OAC3BrC,GLiGwBmC,EKjGDD,EAAME,OAAOC,MLkGxC,uCAAO,WAAOrC,EAAeC,GAAtB,mBAAAC,EAAA,6DACGP,EAAgBM,IAAWE,YAA3BR,YACF2C,EAAkB3C,EAAYU,QAAO,SAACd,GAAD,OACzCA,EAAQA,QAAQiB,KAAK+B,SAASJ,MAE1BK,EAAsBF,EAAgB3B,KAC1C,SAACpB,GAAD,OAAaA,EAAQA,WAEvBS,EAAS,CAAEhB,KA3GuB,gCA2GcmC,QAASgB,IARpD,SASCrC,EAAgB0C,EAAhB1C,CAAqCE,EAAUC,GAThD,2CAAP,4DKhGE,CAACD,IAGH,OACE,yBAAKyC,UAAU,oBACb,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,iBAEjB,yBAAKA,UAAU,0BACb,uBAAGA,UAAU,4BACb,2BACEA,UAAU,eACVJ,MAAOP,EACPY,SAAUV,EACVW,YAAY,kBAGhB,yBAAKF,UAAU,qCCzBRG,EAAiB,SAAC1B,EAAe2B,GAC5C,IACMC,GADa5B,EAAQ,KACI6B,oBAAeC,EAAW,CACvDC,sBAAuB,IAIzB,MAAM,GAAN,OAFuBJ,EAAW,KAAO,IAEzC,OAA2BC,ICFhBI,EAAkB,SAAC,GAA+C,IAA7C3D,EAA4C,EAA5CA,QAC1BS,EAAW4B,cACjB,OACE,yBAAKa,UAAW,oCACd,yBAAKA,UAAW,0BACd,yBAAKA,UAAW,+BACd,yBACEU,IAAK5D,EAAQ6D,QAAQC,eCnBJ,qBDoBjBC,IAAK/D,EAAQiB,KACbiC,UAAW,iCAEb,yBAAKc,MAAO,CAAEC,QAAS,YACrB,uBAAGf,UAAU,+BAA+BlD,EAAQiB,MACpD,uBAAGiC,UAAU,gCACVG,EAAerD,EAAQ2B,OAAO,MAKrC,yBACEuB,UAAW,0CACXgB,QAAS,kBAAMzD,EJHA,SAACT,GACxB,OAAO,SAACS,EAAeC,GAAmC,IAChDoB,EAASpB,IAAWoB,KAApBA,KAER,OAAOrB,EAAS,CAAEhB,KA9BJ,YA8BqBmC,QADtB,sBAAOE,GAAP,CAAa9B,OIAImE,CAAUnE,MAElC,uBAAGkD,UAAW,uCEnCa,iBCSxBkB,EAAsB,WACjC,IAAM9D,EAAa+D,aACjB,SAACpC,GAAD,OAA0BA,EAAMrB,YAAYN,cAExCgE,EAAsBD,aAC1B,SAACpC,GAAD,OACEA,EAAMrB,YAAYR,YAAYmE,SAC9BtC,EAAMrB,YAAYP,YAAYkE,UAE5B9D,EAAW4B,cAEjB,OAAI/B,IAAgBA,GAAcgE,EACzB,KAIP,yBACEpB,UAAU,wCACVgB,QAAS,kBAAMzD,EVqGnB,uCAAO,WAAOA,EAAeC,GAAtB,uBAAAC,EAAA,+DACgCD,IAAWE,YAAxCP,EADH,EACGA,YAAaD,EADhB,EACgBA,YACfoE,EAAOnE,EAAYkE,OAAS,GAC5BE,EAAarE,EAChBsE,MAAM,EAAGF,GACTpD,KAAI,SAACpB,GAAD,OAAaA,EAAQA,WALvB,SAMCO,EAAgBkE,EAAhBlE,CAA4BE,EAAUC,GANvC,2CAAP,2DUnGI,uBAAGwC,UAAU,oCD5ByB,mBEO/ByB,EAAc,WACzB,IAAMtE,ECACgE,aAAY,SAACpC,GAAD,OAA0BA,EAAMrB,YAAYP,eDE/D,OACE,yBAAK6C,UAAW,+BACd,yBAAKA,UAAW,qCACb7C,EAAYe,KAAI,SAACpB,EAAS4E,GAAV,OACf,kBAAC,EAAD,CAAiBC,IAAKD,EAAK5E,QAASA,QAGxC,kBAAC,EAAD,QEPO8E,EAAW,SAAC,GAMlB,IALL9E,EAKI,EALJA,QACA+E,EAII,EAJJA,MAKMtE,EAAW4B,cACjB,OACE,yBAAKa,UAAU,aACb,yBAAKA,UAAU,6BACb,yBAAKU,IAAK5D,EAAQ6D,QAAQC,cAAeZ,UAAU,kBAAkBa,IAAK/D,EAAQiB,QAEpF,yBAAKiC,UAAU,4BACb,yBAAKA,UAAU,8BACf,yBAAKA,UAAU,+BACb,uBAAGA,UAAU,kBAAkBlD,EAAQiB,QAI3C,yBAAKiC,UAAU,6BACb,yBAAKA,UAAU,8BACf,yBAAKA,UAAU,+BACb,uBAAGA,UAAU,mBACVG,EAAerD,EAAQ2B,OAAO,IAEjC,uBACEqD,KAAM,UACN9B,UAAU,mBACVgB,QAAS,WACPzD,EVWgB,SAACsE,GAC7B,OAAO,SAACtE,EAAeC,GAAmC,IAChDoB,EAASpB,IAAWoB,KAApBA,KACFF,EAAO,YAAOE,GAEpB,OADAF,EAAQqD,OAAOF,EAAO,GACftE,EAAS,CAAEhB,KArDJ,YAqDqBmC,aUhBhBsD,CAAeH,MAJ5B,e,gBC1BGI,EAAb,kDAIE,WAAmBC,GAAoB,IAAD,8BACpC,cAAMA,IAJAC,eAG8B,IAF9BC,eAE8B,EAGpC,EAAKA,UACHC,SAASC,eAAe,eAAiBD,SAASE,cAAc,OAClE,EAAKH,UAAUpC,UAAY,aAC3B,EAAKmC,UAAYE,SAASE,cAAc,OANJ,EAJxC,gEAcI/F,KAAK4F,UAAUI,YAAYhG,KAAK2F,aAdpC,6CAkBI3F,KAAK4F,UAAUK,YAAYjG,KAAK2F,aAlBpC,+BAsBI,OAAOO,eAAsBlG,KAAK0F,MAAMS,SAAUnG,KAAK2F,eAtB3D,GAA2BS,aCLdC,EAAe,SAAC,GAQtB,IAPLC,EAOI,EAPJA,UACAH,EAMI,EANJA,SACAI,EAKI,EALJA,cAMMC,EAAiBF,EAAY,gBAAkB,QACrD,OACE,kBAAC,EAAD,KACE,yBACEG,GAAG,gBACHjD,UAAWgD,EACXhC,QAAS+B,GAET,yBACE/C,UAAU,gBACVgB,QAAS,SAACkC,GAAD,OACPA,EAAEC,oBAGJ,yBAAKnD,UAAU,gBACb,0BACEoD,KAAK,SACLpD,UAAU,kBACVgB,QAAS+B,GAHX,SAQF,yBAAK/C,UAAU,cAAc2C,GAC7B,yBAAK3C,UAAU,qBC/BZqD,EAAmB,SAAC,GAM1B,IALL5E,EAKI,EALJA,MACA6E,EAII,EAJJA,MAKA,OACE,yBAAKtD,UAAU,4BACb,yCACA,wBAAIA,UAAU,uBAAd,mBACA,wBAAIA,UAAU,uBACZ,2BAAIsD,GADN,mBAC6B,2BAAInD,EAAe1B,GAAO,OCHhD8E,EAAW,WAGtB,IAAM3E,EAAOuC,aAAY,SAACpC,GAAD,OAA0BA,EAAMH,KAAKA,QACxDrB,EAAW4B,cAJW,EAOQC,oBAAS,GAPjB,mBAOrBoE,EAPqB,KAOTC,EAPS,KAUtBC,EACJ9E,EAAK+E,QAAO,SAAClG,EAAGmG,GAAJ,OAAUnG,EAAItB,KAAK0H,MAAgB,IAAVD,EAAEnF,SAAc,GAAK,IAE5D,OACE,oCACE,yBAAKuB,UAAU,0BACb,yBAAKA,UAAU,gCACb,yBAAKA,UAAU,gCACb,uBAAGA,UAAU,sBRjCQ,aQmCvB,yBAAKA,UAAU,+BACZpB,EAAKV,KAAI,SAAC4F,EAAMpC,GAAP,OACR,kBAAC,EAAD,CAAUC,IAAKD,EAAK5E,QAASgH,EAAMjC,MAAOH,QAG9C,yBAAK1B,UAAU,gCACb,yBAAKA,UAAU,uCACb,uBAAGA,UAAU,iCRzCK,WQ6CpB,yBAAKA,UAAU,sCACb,uBAAGA,UAAU,iCACVG,EAAeuD,GAAY,MAIlC,yBACE1D,UAAU,gCACVgB,QAAS,kBAAMyC,GAAc,KAE7B,uBAAGzD,UAAU,4BRtDY,cQ0D/B,kBAAC,EAAD,CACE8C,UAAWU,EACXT,cAAe,WACbxF,GdvBD,SAACA,GAEN,OAAOA,EAAS,CAAEhB,KAxCJ,YAwCqBmC,QADA,QcuB7B+E,GAAc,KAGhB,kBAAC,EAAD,CAAkBH,MAAO1E,EAAKyC,OAAQ5C,MAAOiF,OC1DxCK,EAAc,WAGzB,IAAMxG,EAAW4B,cAGXjC,ECRCiE,aAAY,SAACpC,GAAD,OAA0BA,EAAMrB,YAAYR,eD2B/D,OAfA8G,qBAAU,WACRzG,ElBiCF,uCAAO,WAAOA,GAAP,eAAAE,EAAA,sEACqBnB,EAAe2H,cADpC,OACC/G,EADD,OAELK,EAAS,CAAEhB,KAhDgB,yBAgDcmC,QAASxB,IAF7C,2CAAP,yDkBhCG,CAACK,IAGJyG,qBAAU,WACR,GAAI9G,EAAYmE,OAAS,EAAG,CAC1B,IACME,EAAarE,EAChBsE,MAAM,EAFI,IAGVtD,KAAI,SAACpB,GAAD,OAAaA,EAAQA,WAC5BS,EAASF,EAAgBkE,OAE1B,CAAChE,EAAUL,IAGZ,yBAAK8C,UAAU,kBACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,4BACb,yBAAKA,UAAU,0BACb,kBAAC,EAAD,OAEF,kBAAC,EAAD,SEtCRkE,EAAQ,IAER,IAAMC,ECGS,WAGb,IAAMC,ECLqB,WAC3B,IACE,IAAMC,EAAkBC,aAAaC,QAAQ,aAC7C,GAAwB,OAApBF,EACF,OAEF,OAAOG,KAAKC,MAAMJ,GAClB,MAAOK,GACP,QDHqBC,GAGjBR,EAAQS,YAAYC,EAAST,EAAgBU,YAAgBC,MASnE,OANAZ,EAAMa,UEbD,SAAkBC,EAAkBC,EAAcC,GACvD,IAAIC,EACAC,EACAC,EACAC,EAAiC,KACjCC,EAAW,EACVL,IAASA,EAAU,IACxB,IAAIM,EAAQ,WACVD,GAA+B,IAApBL,EAAQO,QAAoB,EAAIC,KAAKC,MAChDL,EAAU,KACVD,EAASL,EAAKY,MAAMT,EAASC,GACxBE,IAASH,EAAUC,EAAO,OAEjC,OAAO,WACL,IAAIO,EAAMD,KAAKC,MACVJ,IAAgC,IAApBL,EAAQO,UAAmBF,EAAWI,GACvD,IAAIE,EAAYZ,GAAQU,EAAMJ,GAc9B,OAbAJ,EAAU5I,KACV6I,EAAOU,UACHD,GAAa,GAAKA,EAAYZ,GAC5BK,IACFS,aAAaT,GACbA,EAAU,MAEZC,EAAWI,EACXN,EAASL,EAAKY,MAAMT,EAASC,GACxBE,IAASH,EAAUC,EAAO,OACrBE,IAAgC,IAArBJ,EAAQc,WAC7BV,EAAUW,WAAWT,EAAOK,IAEvBR,GFhBPa,EAAS,YCIgB,SAACC,GAC5B,IAEE,IAAMpJ,EEjBH,SAAwBqJ,GAG7B,IAFA,IAAMC,EAAmC,GACnCC,EAAW,GACRC,EAAI,EAAGA,EAAIH,EAAMhF,OAAQmF,IAAK,CACrC,IAAMzI,EAAOsI,EAAMG,GAAGzI,KACjBuI,EAAOvI,KACVwI,EAASE,KAAKJ,EAAMG,IACpBF,EAAOvI,GAAQ,GAGnB,OAAOwI,EFOeG,CAAeN,GAG7BrH,EAAuB,CAC3BH,KAAM,CAAEA,KAAMwH,GACd1I,YAAY,2BACPT,GADM,IAETD,iBAKEqH,EAAkBG,KAAKmC,UAAU5H,GACvCuF,aAAasC,QAAQ,YAAavC,GAClC,WDpBEwC,CAAc1C,EAAM3G,WAAWoB,KAAKA,QAClC,MAGCuF,EDlBK2C,GAUCC,EARH,WACV,OACE,kBAAC,IAAD,CAAU5C,MAAOA,GACf,kBAAC,EAAD,Q,MKAc6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN1E,IAAS2E,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjF,SAASC,eAAe,SDgIpB,kBAAmBiF,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.62029d54.chunk.js","sourcesContent":["\r\n/**\r\n * Função utilizada para gerar um preço aleatório\r\n * \r\n * @param min valor minimo do preço que irá ser gerado\r\n * @param max valor máximo do preço que irá ser gerado\r\n * @returns Preço aleatório\r\n */\r\nexport const generateRandomPrice = (min: number, max: number) => {\r\n  const randomNumber = Math.random() * max + min;\r\n  const roundDecimalPlaces = Math.round(randomNumber * 100);\r\n  return roundDecimalPlaces;\r\n};\r\n","import { AnyAction } from 'redux';\r\nimport { PokemonManager } from '../../model/PokemonManager';\r\nimport Axios from 'axios';\r\nimport { PokemonResponse } from '../../model/API/PokemonResponse';\r\nimport { PokemonShopInfo } from '../../model/PokemonShopInfo';\r\nimport { Pokemon } from '../../model/Pokemon';\r\nimport { generateRandomPrice } from '../../utils/generateRandomPrice';\r\nimport { RootStateType } from '.';\r\n\r\nconst POKEMON_SHOP_LIST_DATA = 'pokemon_shop_list_data';\r\nconst POKEMON_SHOP_INFO_DATA = 'pokemon_shop_info_data';\r\nconst POKEMON_SHOP_SHOW_DATA = 'pokemon_shop_show_data';\r\nconst POKEMON_SHOP_LAST_SEARCH_DATA = 'pokemon_shop_last_search_data';\r\n\r\nconst pokemonManager = new PokemonManager(); // Manager que irá manipular os requests\r\n\r\nexport interface PokemonShopDuck {\r\n  pokemonList: { pokemon: Pokemon; slot: number }[]; // Lista total dos pokémons do determinado tipo\r\n  pokemonShow: PokemonShopInfo[]; // Lista de pokemons que irá ser mostrado na tela\r\n  pokemonInfo: PokemonShopInfo[]; // Cache de informações que armazena os pokémons e seus determinados preços\r\n  lastSearch: string; // Variável que guarda a ultima busca;\r\n}\r\n\r\nexport const POKEMON_SHOP_INITIAL_STATE: PokemonShopDuck = {\r\n  pokemonList: [],\r\n  pokemonShow: [],\r\n  pokemonInfo: [],\r\n  lastSearch: '',\r\n};\r\n\r\n/**\r\n * Reducer que representa a vitrine de pokemon\r\n */\r\nexport default (\r\n  state = POKEMON_SHOP_INITIAL_STATE,\r\n  action: AnyAction\r\n): PokemonShopDuck => {\r\n  switch (action.type) {\r\n    case POKEMON_SHOP_LIST_DATA:\r\n      return { ...state, pokemonList: action.payload };\r\n    case POKEMON_SHOP_INFO_DATA:\r\n      return { ...state, pokemonInfo: action.payload };\r\n    case POKEMON_SHOP_SHOW_DATA:\r\n      return { ...state, pokemonShow: action.payload };\r\n    case POKEMON_SHOP_LAST_SEARCH_DATA:\r\n      return { ...state, lastSearch: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n/**\r\n * Action creator que carrega a lista de pokemons de um determinado tipo\r\n */\r\nexport const loadPokemonList = () => {\r\n  return async (dispatch: any) => {\r\n    const pokemonList = await pokemonManager.getPokemons();\r\n    dispatch({ type: POKEMON_SHOP_LIST_DATA, payload: pokemonList });\r\n  };\r\n};\r\n\r\n/**\r\n * Action creator que é utilizado para buscar as informações dos pokemons que irá ser mostrado.\r\n * @param pokemons array de pokemons que irá ser buscado\r\n */\r\nexport const loadPokemonShow = (pokemons: Pokemon[]) => {\r\n  return async (dispatch: any, getState: () => RootStateType) => {\r\n    const { pokemonInfo } = getState().pokemonShop;\r\n\r\n    // informações dos pokemons já armazenados\r\n    const cachedPokemons = pokemonInfo.filter((pokemon) =>\r\n      pokemons.find((p) => p.name === pokemon.name)\r\n    );\r\n\r\n    // array de pokemons que irá buscar novas informações\r\n    const newPokemons = pokemons.filter(\r\n      (pokemon) => !pokemonInfo.find((p) => p.name === pokemon.name)\r\n    );\r\n\r\n    // fazendo requisições para buscar os novos pokemons\r\n    const pokemonRequests = newPokemons.map((pokemon) => {\r\n      const pokemonPromise = Axios.get<PokemonResponse>(pokemon.url);\r\n      return pokemonPromise;\r\n    });\r\n    const response = await Promise.all(pokemonRequests);\r\n\r\n    // adicionando preço aleatório aos novos pokemons\r\n    const newPokemonsPayload = response.map((resp) => ({\r\n      ...resp.data,\r\n      price: generateRandomPrice(10, 1000),\r\n    }));\r\n\r\n    // pokemons a serem mostrados serão os antigos mais os novos\r\n    const payload = [...cachedPokemons, ...newPokemonsPayload];\r\n\r\n    // colocando informações no array de cache\r\n    dispatch({\r\n      type: POKEMON_SHOP_INFO_DATA,\r\n      payload: [...pokemonInfo, ...newPokemonsPayload],\r\n    });\r\n\r\n    // mostrando informações que os novos pokemons irão aparecer\r\n    return dispatch({ type: POKEMON_SHOP_SHOW_DATA, payload });\r\n  };\r\n};\r\n\r\n/**\r\n *  Action creator que procura os pokémon de acordo com a string de entrada e mostra os pokemons em seguida\r\n * @param search string que irá ser buscada\r\n */\r\nexport const searchPokemon = (search: string) => {\r\n  return async (dispatch: any, getState: () => RootStateType) => {\r\n    const { pokemonList } = getState().pokemonShop;\r\n    const pokemonFiltered = pokemonList.filter((pokemon) =>\r\n      pokemon.pokemon.name.includes(search)\r\n    );\r\n    const pokemonFilteredUrls = pokemonFiltered.map(\r\n      (pokemon) => pokemon.pokemon\r\n    );\r\n    dispatch({ type: POKEMON_SHOP_LAST_SEARCH_DATA, payload: search });\r\n    await loadPokemonShow(pokemonFilteredUrls)(dispatch, getState);\r\n  };\r\n};\r\n\r\n/**\r\n * Action creator que carrega mais pokemóns a vitrine\r\n */\r\nexport const loadMorePokemon = () => {\r\n  return async (dispatch: any, getState: () => RootStateType) => {\r\n    const { pokemonShow, pokemonList } = getState().pokemonShop;\r\n    const size = pokemonShow.length + 20;\r\n    const pokemonUrl = pokemonList\r\n      .slice(0, size)\r\n      .map((pokemon) => pokemon.pokemon);\r\n    await loadPokemonShow(pokemonUrl)(dispatch, getState);\r\n  };\r\n};\r\n","import axios from 'axios';\r\nimport { POKEMON_API_URL } from '../constants/API';\r\nimport { PokemonTypeResponse } from './API/PokemonTypeResponse';\r\nimport { PokemonResponse } from './API/PokemonResponse';\r\n\r\n/**\r\n * Manager utilizado para realizar os requests dos pokemons. \r\n * \r\n * Ele utiliza a variável de ambiente \"REACT_APP_POKEMON_TYPE\" para determinar que tipo de pokémon será buscado\r\n */\r\nexport class PokemonManager {\r\n  public type: String; //Tipo do pokémon que ele está buscando\r\n\r\n  constructor() {\r\n    if (process.env.REACT_APP_POKEMON_TYPE) {\r\n      this.type = process.env.REACT_APP_POKEMON_TYPE;\r\n    } else {\r\n      throw new Error('Tipo não declarado');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Função que retorna a lista geral dos pokemons de um determinado tipo\r\n   */\r\n  async getPokemons() {\r\n    const typePokemon = await axios.get<PokemonTypeResponse>(\r\n      `${POKEMON_API_URL}/type/${this.type}`\r\n    );\r\n    return typePokemon.data.pokemon;\r\n  }\r\n\r\n  /**\r\n   * Esta função busca as informações do pokemon recebendo a url dele como entrada\r\n   * @param url url de entrada para busca infnormação do pokemon\r\n   */\r\n  async getPokemonInfo(url: string) {\r\n    const pokemonInfo = await axios.get<PokemonResponse>(url);\r\n    return pokemonInfo.data;\r\n  }\r\n}\r\n","export const POKEMON_API_URL = 'https://pokeapi.co/api/v2';\r\n","import { AnyAction } from 'redux';\r\nimport { RootStateType } from '.';\r\nimport { PokemonShopInfo } from '../../model/PokemonShopInfo';\r\n\r\nconst CART_DATA = 'cart_data';\r\n\r\nexport interface CartDuck {\r\n  cart: PokemonShopInfo[]; // Lista de pokémon dentro do carrinho\r\n}\r\n\r\nconst CART_INITIAL_STATE: CartDuck = {\r\n  cart: [],\r\n};\r\n\r\n/**\r\n * Reducer que representa o carrinho\r\n */\r\nexport default (state = CART_INITIAL_STATE, action: AnyAction): CartDuck => {\r\n  switch (action.type) {\r\n    case CART_DATA:\r\n      return { ...state, cart: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n/**\r\n * Action creator que adiciona um pokemon ao carrinho\r\n * @param pokemon Pokémon que irá ser adicioando ao carrinho\r\n */\r\nexport const addToCart = (pokemon: PokemonShopInfo) => {\r\n  return (dispatch: any, getState: () => RootStateType) => {\r\n    const { cart } = getState().cart;\r\n    const payload = [...cart, pokemon];\r\n    return dispatch({ type: CART_DATA, payload });\r\n  };\r\n};\r\n\r\n/**\r\n * Action creator  que reseta o carrinho (utilizado pós compra)\r\n */\r\nexport const resetCart = () => {\r\n  return (dispatch: any) => {\r\n    const payload: PokemonShopInfo[] = [];\r\n    return dispatch({ type: CART_DATA, payload });\r\n  };\r\n};\r\n\r\n/**\r\n * Action creator que remove um pokémon do carrinho\r\n * @param index índice que irá ser removido\r\n */\r\nexport const removeFromCart = (index: number) => {\r\n  return (dispatch: any, getState: () => RootStateType) => {\r\n    const { cart } = getState().cart;\r\n    const payload = [...cart];\r\n    payload.splice(index, 1);\r\n    return dispatch({ type: CART_DATA, payload });\r\n  };\r\n};\r\n","import { AnyAction, combineReducers } from 'redux';\r\nimport pokemonShop from './pokemonShop';\r\nimport cart from './cart';\r\n\r\n// Reducer principal do aplicativo\r\nconst appReducer = combineReducers({\r\n  pokemonShop,\r\n  cart,\r\n});\r\n\r\nconst rootReducer = (state: any, action: AnyAction) => {\r\n  return appReducer(state, action);\r\n};\r\n\r\nexport default rootReducer;\r\n\r\n// Tipo do estado do redux do aplicativo\r\nexport type RootStateType = ReturnType<typeof rootReducer>;\r\n","import React, { useState, useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { searchPokemon } from '../../store/ducks/pokemonShop';\r\n\r\n/**\r\n * Componente que renderiza a navbar\r\n */\r\nexport const NavBar = () => {\r\n  const dispatch = useDispatch();\r\n  const [inputValue, setInputValue] = useState('');\r\n  const handleChange = useCallback(\r\n    (event: React.ChangeEvent<HTMLInputElement>) => {\r\n      setInputValue(event.target.value);\r\n      dispatch(searchPokemon(event.target.value));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  return (\r\n    <div className=\"navbar-container\">\r\n      <div className=\"navbar-logo-container\">\r\n        <div className=\"navbar-logo\" />\r\n      </div>\r\n      <div className=\"navbar-input-container\">\r\n        <i className=\"fa fa-search fa-lg icon\" />\r\n        <input\r\n          className=\"navbar-input\"\r\n          value={inputValue}\r\n          onChange={handleChange}\r\n          placeholder=\"Pesquisar...\"\r\n        />\r\n      </div>\r\n      <div className=\"navbar-right-element-container\"></div>\r\n    </div>\r\n  );\r\n};\r\n","/**\r\n * Função utilizada para pegar a string do preço em float\r\n * \r\n * @param price preço que irá ser mostrado\r\n * @param currency flag para defnir se coloca R$ na frente\r\n * @returns O preço em string\r\n */\r\nexport const getPriceString = (price: number, currency?: boolean) => {\r\n  const priceFloat = price / 100;\r\n  const priceString = priceFloat.toLocaleString(undefined, {\r\n    minimumFractionDigits: 2,\r\n  });\r\n  const currencyString = currency ? 'R$' : '';\r\n\r\n  return `${currencyString}${priceString}`;\r\n};\r\n","import React from 'react';\r\nimport { CARD_ADD_BUTTON_TITLE } from '../../../constants/dictionary';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addToCart } from '../../../store/ducks/cart';\r\nimport { getPriceString } from '../../../utils/getPriceString';\r\nimport { NO_IMAGE_PATH } from '../../../constants/image';\r\nimport { PokemonShopInfo } from '../../../model/PokemonShopInfo';\r\n\r\n/**\r\n * Componente que renderiza o cartão de um pokemon\r\n * @param pokemon pokemon que irá ser representado no cartão\r\n */\r\nexport const PokemonListCard = ({ pokemon }: { pokemon: PokemonShopInfo }) => {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div className={'pokemon-shop-list-card-container'}>\r\n      <div className={'pokemon-shop-list-card'}>\r\n        <div className={'pokemon-shop-list-card-info'}>\r\n          <img\r\n            src={pokemon.sprites.front_default || NO_IMAGE_PATH}\r\n            alt={pokemon.name}\r\n            className={'pokemon-shop-list-card-image'}\r\n          />\r\n          <div style={{ display: 'flexbox' }}>\r\n            <p className=\"pokemon-shop-list-card-name\">{pokemon.name}</p>\r\n            <p className=\"pokemon-shop-list-card-price\">\r\n              {getPriceString(pokemon.price, true)}\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          className={'pokemon-shop-list-card-button-container'}\r\n          onClick={() => dispatch(addToCart(pokemon))}\r\n        >\r\n          <p className={'pokemon-shop-list-card-button-title'}>\r\n            {CARD_ADD_BUTTON_TITLE}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","export const NO_IMAGE_PATH = './img/no-image.jpg';\r\n","export const CARD_ADD_BUTTON_TITLE = 'Adicionar';\r\nexport const POKEMON_LIST_LOAD_MORE_TITLE = 'Carregar Mais';\r\nexport const CART_HEADER_TITLE = 'Carrinho';\r\nexport const CART_TOTAL_LABEL = 'Total:';\r\nexport const CART_BUY_BUTTON_TITLE = 'Comprar';\r\n","import React from 'react';\r\nimport { POKEMON_LIST_LOAD_MORE_TITLE } from '../../../constants/dictionary';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootStateType } from '../../../store/ducks';\r\nimport { loadMorePokemon } from '../../../store/ducks/pokemonShop';\r\n\r\n/**\r\n *  Componente que representa o botão de carregar mais pokémon no final da lista\r\n */\r\nexport const PokemonListLoadMore = () => {\r\n  const lastSearch = useSelector(\r\n    (state: RootStateType) => state.pokemonShop.lastSearch\r\n  );\r\n  const pokemonListSameSize = useSelector(\r\n    (state: RootStateType) =>\r\n      state.pokemonShop.pokemonList.length ===\r\n      state.pokemonShop.pokemonShow.length\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  if (lastSearch || (!lastSearch && pokemonListSameSize)) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"pokemon-shop-list-load-more-container\"\r\n      onClick={() => dispatch(loadMorePokemon())}\r\n    >\r\n      <p className=\"pokemon-shop-list-load-more-text\">\r\n        {POKEMON_LIST_LOAD_MORE_TITLE}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { useSelectPokemonShow } from '../../hooks/useSelectPokemonShow';\r\nimport { PokemonListCard } from './components/PokemonListCard';\r\nimport { PokemonListLoadMore } from './components/PokemonListLoadMore';\r\n\r\n/**\r\n * Componente qure representa a vitrine da loja de pokemons\r\n */\r\nexport const PokemonList = () => {\r\n  const pokemonShow = useSelectPokemonShow();\r\n\r\n  return (\r\n    <div className={'pokemon-shop-list-container'}>\r\n      <div className={'pokemon-shop-list-inner-container'}>\r\n        {pokemonShow.map((pokemon, idx) => (\r\n          <PokemonListCard key={idx} pokemon={pokemon} />\r\n        ))}\r\n      </div>\r\n      <PokemonListLoadMore />\r\n    </div>\r\n  );\r\n};\r\n","import { RootStateType } from '../store/ducks';\r\nimport { useSelector } from 'react-redux';\r\n\r\n/**\r\n * Hook utilizado para pegar o estado da lista de pokemon que são mostrados na loja no redux\r\n * @returns lista de pokemons que são mostrados na loja no redux\r\n */\r\n\r\nexport const useSelectPokemonShow = () => {\r\n  return useSelector((state: RootStateType) => state.pokemonShop.pokemonShow);\r\n};\r\n","import React from 'react';\r\nimport { PokemonShopInfo } from '../../../model/PokemonShopInfo';\r\nimport { getPriceString } from '../../../utils/getPriceString';\r\nimport { useDispatch } from 'react-redux';\r\nimport { removeFromCart } from '../../../store/ducks/cart';\r\n\r\n/**\r\n * Componente que renderiza um pokemon no carrinho. \r\n * @param pokemon pokemon que será renderizado\r\n * @param index index que este pokemon está na lista (utilizado para removê-lo do carrinho)\r\n */\r\nexport const CartItem = ({\r\n  pokemon,\r\n  index,\r\n}: {\r\n  pokemon: PokemonShopInfo;\r\n  index: number;\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div className=\"cart-item\">\r\n      <div className=\"cart-item-image-container\">\r\n        <img src={pokemon.sprites.front_default} className=\"cart-item-image\" alt={pokemon.name} />\r\n      </div>\r\n      <div className=\"cart-item-name-container\">\r\n        <div className=\"cart-item-space-container\" />\r\n        <div className=\"cart-item-content-container\">\r\n          <p className=\"cart-item-name\">{pokemon.name}</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"cart-item-price-container\">\r\n        <div className=\"cart-item-space-container\" />\r\n        <div className=\"cart-item-content-container\">\r\n          <p className=\"cart-item-price\">\r\n            {getPriceString(pokemon.price, true)}\r\n          </p>\r\n          <a\r\n            href={\"#remove\"}\r\n            className=\"cart-item-remove\"\r\n            onClick={() => {\r\n              dispatch(removeFromCart(index));\r\n            }}\r\n          >\r\n            Remover\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nexport type ModalProps = {\r\n  children: JSX.Element;\r\n};\r\nexport type ModalState = any;\r\n\r\n/**\r\n * Componente do Modal\r\n */\r\nexport class Modal extends React.Component<ModalProps, ModalState> {\r\n  private container: HTMLDivElement;\r\n  private modalRoot: HTMLElement;\r\n\r\n  public constructor(props: ModalProps) {\r\n    super(props);\r\n\r\n    this.modalRoot =\r\n      document.getElementById('root-modal') || document.createElement('div');\r\n    this.modalRoot.className = 'root-modal';\r\n    this.container = document.createElement('div');\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    this.modalRoot.appendChild(this.container);\r\n  }\r\n\r\n  public componentWillUnmount(): void {\r\n    this.modalRoot.removeChild(this.container);\r\n  }\r\n\r\n  public render(): React.ReactElement<ModalProps> {\r\n    return ReactDOM.createPortal(this.props.children, this.container);\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Modal } from './Modal';\r\n\r\n/**\r\n * Componente que renderiza um mondal demonstrando uma mensagem\r\n */\r\nexport const ModalMessage = ({\r\n  showModal,\r\n  children,\r\n  closeFunction,\r\n}: {\r\n  showModal?: boolean;\r\n  children: JSX.Element;\r\n  closeFunction: () => void;\r\n}) => {\r\n  const containerStyle = showModal ? 'modal display' : 'modal';\r\n  return (\r\n    <Modal>\r\n      <div\r\n        id=\"modal-message\"\r\n        className={containerStyle}\r\n        onClick={closeFunction}\r\n      >\r\n        <div\r\n          className=\"modal-content\"\r\n          onClick={(e: React.MouseEvent<HTMLDivElement, MouseEvent>) =>\r\n            e.stopPropagation()\r\n          }\r\n        >\r\n          <div className=\"modal-header\">\r\n            <span\r\n              role=\"button\"\r\n              className=\"modal-btn-close\"\r\n              onClick={closeFunction}\r\n            >\r\n              &times;\r\n            </span>\r\n          </div>\r\n          <div className=\"modal-body\">{children}</div>\r\n          <div className=\"modal-footer\"></div>\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { getPriceString } from '../../../utils/getPriceString';\r\n\r\n/**\r\n * Modal que aparece ao finalizar a compra\r\n * @param price preço final da compra\r\n * @param total total de pokémon comprados\r\n */\r\nexport const CardListBuyModal = ({\r\n  price,\r\n  total,\r\n}: {\r\n  price: number;\r\n  total: number;\r\n}) => {\r\n  return (\r\n    <div className=\"cart-buy-modal-container\">\r\n      <h1>Obrigado!</h1>\r\n      <h3 className=\"cart-buy-modal-text\">Você comprou</h3>\r\n      <h2 className=\"cart-buy-modal-text\">\r\n        <b>{total}</b> pokémon por <b>{getPriceString(price, true)}</b>\r\n      </h2>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootStateType } from '../../store/ducks';\r\nimport { CartItem } from './components/CartItem';\r\nimport { ModalMessage } from '../Modal/ModalMessage';\r\nimport { CardListBuyModal } from './components/CartListBuyModal';\r\nimport { getPriceString } from '../../utils/getPriceString';\r\nimport { resetCart } from '../../store/ducks/cart';\r\nimport {\r\n  CART_HEADER_TITLE,\r\n  CART_TOTAL_LABEL,\r\n  CART_BUY_BUTTON_TITLE,\r\n} from '../../constants/dictionary';\r\n\r\n/**\r\n * Componente que irá renderizar o carrinho\r\n */\r\nexport const CartList = () => {\r\n  \r\n  // Buscando informações do carrinho\r\n  const cart = useSelector((state: RootStateType) => state.cart.cart);\r\n  const dispatch = useDispatch();\r\n\r\n  // Estado que representa se o modal está aberto ou não\r\n  const [modalState, setModalState] = useState(false);\r\n\r\n  // Preço total do carrinho\r\n  const totalPrice =\r\n    cart.reduce((a, b) => a + Math.floor(b.price * 100), 0) / 100;\r\n\r\n  return (\r\n    <>\r\n      <div className=\"pokemon-cart-container\">\r\n        <div className=\"pokemon-cart-inner-container\">\r\n          <div className=\"pokemon-cart-title-container\">\r\n            <p className=\"pokemon-cart-title\">{CART_HEADER_TITLE}</p>\r\n          </div>\r\n          <div className=\"pokemon-cart-list-container\">\r\n            {cart.map((item, idx) => (\r\n              <CartItem key={idx} pokemon={item} index={idx} />\r\n            ))}\r\n          </div>\r\n          <div className=\"pokemon-cart-total-container\">\r\n            <div className=\"pokemon-cart-total-label-container \">\r\n              <p className=\"pokemon-cart-total-label-text\">\r\n                {CART_TOTAL_LABEL}\r\n              </p>\r\n            </div>\r\n            <div className=\"pokemon-cart-total-price-container\">\r\n              <p className=\"pokemon-cart-total-price-text\">\r\n                {getPriceString(totalPrice, true)}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div\r\n            className=\"pokemon-cart-button-container\"\r\n            onClick={() => setModalState(true)}\r\n          >\r\n            <p className=\"pokemon-cart-button-text\">{CART_BUY_BUTTON_TITLE}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <ModalMessage\r\n        showModal={modalState}\r\n        closeFunction={() => {\r\n          dispatch(resetCart());\r\n          setModalState(false);\r\n        }}\r\n      >\r\n        <CardListBuyModal total={cart.length} price={totalPrice} />\r\n      </ModalMessage>\r\n    </>\r\n  );\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { loadPokemonList, loadPokemonShow } from '../store/ducks/pokemonShop';\r\nimport { NavBar } from '../components/Navbar/NavBar';\r\nimport { useSelectPokemonList } from '../hooks/useSelectPokemonList';\r\nimport { PokemonList } from '../components/PokemonList/PokemonList';\r\nimport { CartList } from '../components/Cart/CartList';\r\n\r\n/**\r\n * Página do shop do pokemon. Esta página mostra a vitrine, carrinho de compras e busca\r\n */\r\nexport const PokemonPage = () => {\r\n  \r\n  \r\n  const dispatch = useDispatch();\r\n  \r\n  // recebendo valor da lista de pokemons do determinado tipo\r\n  const pokemonList = useSelectPokemonList();\r\n\r\n\r\n  // Quando carregar a página, pegar a lista de pokemons de um determinado tipo\r\n  useEffect(() => {\r\n    dispatch(loadPokemonList());\r\n  }, [dispatch]);\r\n\r\n  // Carregando a informação dos 40 pokemons iniciais (para evitar a página carregar todos de uma vez só)\r\n  useEffect(() => {\r\n    if (pokemonList.length > 0) {\r\n      const size = 40;\r\n      const pokemonUrl = pokemonList\r\n        .slice(0, size)\r\n        .map((pokemon) => pokemon.pokemon);\r\n      dispatch(loadPokemonShow(pokemonUrl));\r\n    }\r\n  }, [dispatch, pokemonList]);\r\n\r\n  return (\r\n    <div className=\"page-container\">\r\n      <NavBar />\r\n      <div className=\"page-list-cart-container\">\r\n        <div className=\"pokemon-list-container\">\r\n          <PokemonList />\r\n        </div>\r\n        <CartList />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { RootStateType } from '../store/ducks';\r\nimport { useSelector } from 'react-redux';\r\n\r\n/**\r\n * Hook utilizado para pegar o estado da lista de pokemon no redux\r\n * @returns lista de pokemons no redux\r\n */\r\n\r\nexport const useSelectPokemonList = () => {\r\n  return useSelector((state: RootStateType) => state.pokemonShop.pokemonList);\r\n};\r\n","import React from 'react';\r\nimport './styles/App.scss';\r\nimport configureStore from './store/configureStore';\r\nimport { Provider } from 'react-redux';\r\nimport { PokemonPage } from './page/PokemonShopPage';\r\nrequire(`./styles/types/${process.env.REACT_APP_POKEMON_TYPE}.scss`);\r\n\r\nconst store = configureStore();\r\n\r\nconst App = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <PokemonPage />\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport ReduxThunk from 'redux-thunk';\r\nimport reducer from './ducks';\r\nimport { loadCartState, saveCartState } from './localStorage';\r\nimport { throttle } from '../utils/throttle';\r\n\r\n/**\r\n * Função que configura o estado do store do redux;\r\n *\r\n */\r\nexport default function configureStore() {\r\n  \r\n  // resgatando o carrinho salvo localmente\r\n  const persistedState = loadCartState();\r\n\r\n  // criando store do redux\r\n  const store = createStore(reducer, persistedState, applyMiddleware(ReduxThunk));\r\n\r\n  // salvando estado do carrinho a cada 1 segundo\r\n  store.subscribe(\r\n    throttle(() => { \r\n      saveCartState(store.getState().cart.cart)\r\n    } , 1000) \r\n  )\r\n\r\n  return store;\r\n}","import { POKEMON_SHOP_INITIAL_STATE } from './ducks/pokemonShop';\r\nimport { PokemonShopInfo } from '../model/PokemonShopInfo';\r\nimport { RootStateType } from './ducks';\r\nimport { distincPokemon } from '../utils/distincPokemon';\r\n\r\n/**\r\n * função que carrega o estado do carrinho do store para o redux\r\n */\r\nexport const loadCartState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('cartState');\r\n    if (serializedState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(serializedState);\r\n  } catch (err) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\n/**\r\n *\r\n * @param state estado que irá ser salvo no redux\r\n */\r\nexport const saveCartState = (cardInfo: PokemonShopInfo[]) => {\r\n  try {\r\n    // realizando um distinct para não colocar pokemons repetidos no info\r\n    const pokemonInfo = distincPokemon(cardInfo);\r\n\r\n    // estado do redux que irá ser salvo no local storage\r\n    const state: RootStateType = {\r\n      cart: { cart: cardInfo },\r\n      pokemonShop: {\r\n        ...POKEMON_SHOP_INITIAL_STATE,\r\n        pokemonInfo,\r\n      },\r\n    };\r\n\r\n    // Salvando o estado no localStorage\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem('cartState', serializedState);\r\n  } catch {\r\n    // ignorar errors de escrita\r\n  }\r\n};\r\n","/**\r\n * Função de throttle retirada do loadash. Colocado aqui para evitar a importação do loadash apenas para um caso\r\n * @param func função que irá receber o throttle\r\n * @param wait quantidade de milisegundos que precisará esperar\r\n * @param options opções do throttle\r\n */\r\nexport function throttle(func: () => void, wait: number, options?: any) {\r\n  let context: any;\r\n  let args: any;\r\n  let result: any;\r\n  let timeout: NodeJS.Timeout | null = null;\r\n  let previous = 0;\r\n  if (!options) options = {};\r\n  var later = function () {\r\n    previous = options.leading === false ? 0 : Date.now();\r\n    timeout = null;\r\n    result = func.apply(context, args);\r\n    if (!timeout) context = args = null;\r\n  };\r\n  return function (this: any) {\r\n    var now = Date.now();\r\n    if (!previous && options.leading === false) previous = now;\r\n    var remaining = wait - (now - previous);\r\n    context = this;\r\n    args = arguments;\r\n    if (remaining <= 0 || remaining > wait) {\r\n      if (timeout) {\r\n        clearTimeout(timeout);\r\n        timeout = null;\r\n      }\r\n      previous = now;\r\n      result = func.apply(context, args);\r\n      if (!timeout) context = args = null;\r\n    } else if (!timeout && options.trailing !== false) {\r\n      timeout = setTimeout(later, remaining);\r\n    }\r\n    return result;\r\n  };\r\n}\r\n","import { PokemonShopInfo } from '../model/PokemonShopInfo';\r\n\r\n/**\r\n *\r\n * Função utilizada para filtrar os valores únicos de um array de ppokemon\r\n *\r\n * @param value Valor que irá ser avaliado\r\n * @param index Índice que do array que o valor pertence\r\n * @param self array de entrada\r\n */\r\nexport function distincPokemon(array: PokemonShopInfo[]) {\r\n  const unique: { [id: string]: number } = {};\r\n  const distinct = [];\r\n  for (let i = 0; i < array.length; i++) {\r\n    const name = array[i].name;\r\n    if (!unique[name]) {\r\n      distinct.push(array[i]);\r\n      unique[name] = 1;\r\n    }\r\n  }\r\n  return distinct;\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'font-awesome/css/font-awesome.min.css'; //adicionando font-awesome\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}